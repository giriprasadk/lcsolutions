class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(board.empty())
            return false;
        if(word.empty())
            return true;
        
        if(word.length() > board.size()*board[0].size())
        return false;
    
        vector<pair<int, int>> stack;
        getElementPosition(board, word, stack);
        if((board.size() == 1) && (board[0].size() == 1) && !stack.empty()) {
            return true;
        } 
        
        vector<vector<bool> > used(board.size(), vector<bool> (board[0].size(), false));

        for(int i = 0; i < stack.size(); i++) {
            cout << "row is " << stack[i].first << "col is " << stack[i].second << endl;
            if(existUtil(board, word, stack[i].first, stack[i].second, 0, used))
            {
                return true;
            }            
        }
        return false;     
    }
    
private:
    void getElementPosition(vector<vector<char>>&board, string word, vector<pair<int, int>> &stack)
    {
        int row = board.size();
        int col = board[0].size();

        for(int i = 0; i < row; i ++) {
            for(int j = 0; j < col; j++) {
                if(board[i][j] == word[0]) {
                    stack.push_back(make_pair(i, j));
                }
            }
        }
    }

    bool existUtil(vector<vector<char>> &board, string word, int rPos, int cPos, int wPos, vector<vector<bool> > &used)
    {   
        if(word.size() == wPos)
            return true;
    
        if(rPos < 0 || cPos < 0 || (rPos >= board.size()) || (cPos >= board[0].size()) 
           || used[rPos][cPos]) 
            return false;
        
        if(word[wPos] != board[rPos][cPos])
            return false;

        used[rPos][cPos] = true;  

        if(existUtil(board, word, rPos-1, cPos, wPos+1, used)) return true;
        if(existUtil(board, word, rPos+1, cPos, wPos+1, used)) return true;
        if(existUtil(board, word, rPos, cPos-1, wPos+1, used)) return true;
        if(existUtil(board, word, rPos, cPos+1, wPos+1, used)) return true;

        used[rPos][cPos] = false;

        return false;
    }
};
