class Solution {
public:
    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {
        map<char, char> letMap;
        map<char, char> letMap1;
        vector<string> res;
        vector<string> res1;
        for(string str: words) {
            letMap.clear();
            bool flag = true;
            
            //For one way
            for(int i = 0; i < str.length(); i++) {
                if(str.length() != pattern.length()) {
                    flag = false;
                    break;
                }   
                
                if(letMap.find(pattern[i]) == letMap.end()) {
                    letMap[pattern[i]] = str[i];
                } else {
                    if(letMap[pattern[i]] != str[i]) {
                        flag = false;
                        break;
                    }
                }
            }
            if(flag)
                res.push_back(str);
            
            letMap1.clear();
            bool flag1 = true;
            for(int i = 0; i < str.length(); i++) {
                if(str.length() != pattern.length()) {
                    flag1 = false;
                    break;
                }   
                
                if(letMap1.find(str[i]) == letMap1.end()) {
                    letMap1[str[i]] = pattern[i];
                } else {
                    if(letMap1[str[i]] != pattern[i]) {
                        flag1 = false;
                        break;
                    }
                }
            }
            if(flag1)
                res1.push_back(str);
            
        }
        
        vector<string> fRes;
        for(string &str1: res) {
            if(find(res1.begin(), res1.end(), str1) != res1.end()) 
                fRes.push_back(str1);
        }
        
        return fRes;
    }
};
