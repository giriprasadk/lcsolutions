class Solution {
private:
    int finalCount = 0;
    int cz = 0;
    unordered_set<int> visited;
public:
    void uniquePathsUtil(vector<vector<int>>& grid, int i, int j, int total, unordered_set<int> visited) {
        if((i>=grid.size()) || (j>=grid[0].size()) || (i<0) || (j<0) || (visited.count((i*cz)+j)>0) || (grid[i][j]==-1))
           return;
        
        if(grid[i][j] == 2) {            
            if(visited.size() == total+1)
                finalCount++;
        }    
        
        visited.insert(i*cz+j);
        uniquePathsUtil(grid, i+1, j, total, visited);
        uniquePathsUtil(grid, i, j+1, total, visited);
        uniquePathsUtil(grid, i-1, j, total, visited);        
        uniquePathsUtil(grid, i, j-1, total, visited);
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        int c = 0;
        int x, y;
        cz = grid[0].size();
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(!grid[i][j])
                    c++;
                else if(grid[i][j] == 1) {
                    x = i;
                    y = j;
                }
            }
        }
        cout << x << " " << y << " " << c << endl;
        uniquePathsUtil(grid, x, y, c, visited);
        return finalCount;
    }
};
