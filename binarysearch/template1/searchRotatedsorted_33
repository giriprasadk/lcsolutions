    int findPivot(vector<int> &nums) {
        int s = 0, e = nums.size() - 1;
        
        while(s <= e) {
            int mid = s + (e-s)/2;
            
            if((mid>0) && (nums[mid] < nums[mid-1])) {
                return mid;
            } else if ((mid<e) && (nums[mid] > nums[mid+1])) {
                return mid + 1;
            }
            
            if(nums[mid] < nums[s]) {                
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }
        return -1;
    }
    
    int search(vector<int>& nums, int target) {
        if(nums.empty())
            return -1;
        
        int pi = findPivot(nums);
        int left = 0, right = nums.size()-1;
        if(pi > 0) {
            if (target >= nums[0]) {            
                right = pi-1;
            } else {
                left = pi;            
            }
        }    
        
        while(left <= right) {
            int mid = left+(right-left)/2;
            if(target == nums[mid]) {
                return mid;
            } else if (target > nums[mid]) {
                left = mid+1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }
