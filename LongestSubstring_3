Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length();
        if(n <= 1)
            return n;
        
        int maxLen = 0;
        int currLen = 0;
        int st = 0;
        unordered_map<char, int> pos;
        pos[s[0]] = 0;
        int i;
        
        for(i = 1; i < n; i++) {
            if(pos.find(s[i]) == pos.end()) {
                pos[s[i]] = i;
            } else {
                if(pos[s[i]] >= st ) {
                    currLen = i - st;
                    if(currLen > maxLen)
                        maxLen = currLen;

                     st = pos[s[i]] + 1;
                }   
                pos[s[i]] = i;
            }   
        }
        currLen = i - st;
        if(currLen > maxLen)
            maxLen = currLen;
        
        return maxLen;
    }
};
